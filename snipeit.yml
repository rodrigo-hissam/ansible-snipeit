---

- name: Deploy Snipe IT
  hosts: inventory
  remote_user: ansible


# Modify the variables according to your needs.
  vars:
    # General
    # Use the machines fqdn or set you chosen IP addresss
    fqdn: '{{ ansible_fqdn }}'
    webdir: '/var/www/html'
    apache_file:
    owner: 'apache'
    group: 'apache'
    
    # App 
    app_name: 'snipeit'
    app_user: 'snipeit'
    app_user_pwd: 'Changetoyourdesiredpassword'
    app_locale: 'en'
    app_timezone: 'America/Mexico_City'
    
    # MySql
    mariadb_root_pwd: 'thisisatemporaryrootpasswordnoneedtochange'
    
    # Php
    php_executable: 'php'
    composer_path: '/usr/local/bin/composer'
  
  tasks:

    - name: Adding epel-release and IUS repositories
      yum:
        name: '{{item}}'
        state: latest
      with_items:
        - epel-release
        - https://centos{{ansible_distribution_major_version}}.iuscommunity.org/ius-release.rpm
      become: true

    - name: Importing IUS-COMMUNITY-GPG-KEY
      rpm_key:
        state: present
        key: '/etc/pki/rpm-gpg/IUS-COMMUNITY-GPG-KEY'
      become: true

    - name: Installing PHP 7.0 and other app dependencies
      yum:
        name: '{{item}}'
        state: installed
      with_items:
        - httpd
        - mariadb-server
        - git
        - unzip
        - php71u
        - php71u-mysqlnd
        - php71u-bcmath
        - php71u-cli
        - php71u-common
        - php71u-embedded
        - php71u-gd
        - php71u-mbstring
        - php71u-mcrypt
        - php71u-ldap
        - php71u-json
        - php71u-simplexml
        - MySQL-python
        - curl
        - libselinux-python
        - libsemanage-python
        - policycoreutils-python
      become: yes

    - name: Starting mariadb and httpd service and enabling them at boot
      service: 
        name: '{{item }}'
        state: started
        enabled: true
      with_items:
        - httpd.service
        - mariadb.service
      become: true

    # MySQL server install with default login_user of 'root' and no password. To secure this
    # user as part of an idempotent playbook, you must create at leaset two tasks: the first
    # must change the root user's password, without providing any login_user/login_password
    # details. The second must drop a ~/.my.cnf file containing the new root credentials.
    # Subsequent runs of the playbook will then succeed by reading the new credentials from
    # this file.

    # 1st task - updating mariadb root user.
    - name: Updating root password for all accounts
      mysql_user:
        name: root
        host: '{{ item }}'
        password: '{{ mariadb_root_pwd }}'
      with_items:
        - 127.0.0.1
        - ::1
        - localhost
      become: true
    
    # 2nd task - copying .my.cnf template to /root/
    - name: Copying .my.cnf with root passwords
      template:
        src: my.cnf.j2
        dest: /root/.my.cnf 
        owner: root
        group: root
        mode: 0600
      become: true
      
    # Securing steps for Mariadb 
    - name: Deleting Mariadb anonymous users for all accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
      become: true

    - name: Disallow db remote root login
      command: 'mysql -NBe "{{ item }}"'
      with_items:
        - DELETE FROM mysql.user WHERE User= 'root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
      changed_when: false
      become: true

    - name: Removing the Mariadb test database
      mysql_db:
        name: 'test'
        state: absent
      become: true

    - name: Creating db for SnipeIT
      mysql_db:
        name: "{{app_name}}"
        state: present
      become: yes

    - name: Creating user for SnipeIT db
      mysql_user:
        name: "{{ app_user}}"
        password: '{{app_user_pwd}}'
        priv: '{{app_name}}.*:ALL,GRANT'
        state: present
      become: yes

    - name: Setting SnipeIT virtual host file
      template:
        src: snipeit.virthost.conf.j2
        dest: '/etc/httpd/conf.d/{{ app_name }}.conf'
      become: true

    - name: Adding fqdn to hosts file
      lineinfile:
        path: '/etc/hosts'
        regexp: '^127.0.0.1   localhost'
        state: present
        line: '127.0.0.1   {{fqdn}} localhost'
        backrefs: yes
      become: true

    # Installation of SnipeIT
    - name: Cloning SnipeIT from github to the web directory
      git:
        repo: https://github.com/snipe/snipe-it 
        clone: yes
        dest: '{{ webdir}}/{{app_name}}'
        update: no
      notify: 
        - restart httpd
      become: true

    - name: Setting up .env file
      template:
        src: env.j2
        dest: '{{webdir}}/{{app_name}}/.env'
        owner: '{{owner}}'
        group: '{{group}}'
        mode: 0750
      become: true
      register: env

    - name: Setting app directory owner/group
      file:
        path: '{{webdir}}/{{app_name}}'
        owner: '{{owner}}'
        group: '{{group}}'
        mode: 0750
        state: directory
        recurse: yes
      become: true
  
    # Composer install
    - name: Checking if composer is installed
      stat: 
        path: '{{composer_path}}'
      register: composer_installed

    - name: Downloading the composer installer 
      get_url:
        url: 'https://getcomposer.org/installer'
        dest: '/tmp/composer-installer.php'
      when: not composer_installed.stat.exists
      become: true

    - name: Running composer installer
      command: '{{php_executable}} composer-installer.php'
      args:
        chdir: /tmp
      when: not composer_installed.stat.exists
      become: true

    - name: Moving composer into our path to execute it globally
      command: "mv /tmp/composer.phar '{{composer_path}}' "
      args:
        creates: '{{composer_path}}'
      when: not composer_installed.stat.exists
      become: true

    - name: Downloading Snipe-IT dependencies via composer
      composer:
        command: install 
        no_dev: True
        optimize_autoloader: True
        prefer_source: True
        working_dir: '{{webdir}}/{{app_name}}'
      become: true
      become_user: '{{owner}}'

    - name: Setting permission for publicly accesible folders
      file:
        path: '{{webdir}}/{{app_name}}/{{item}}'
        owner: '{{owner}}'
        group: '{{group}}'
        mode: 0755
        state: directory
        recurse: yes
      with_items: 
        - 'storage'
        - 'public/uploads'
      become: true

    - name: Generating the application key
      command: '{{php_executable}} artisan key:generate --force'
      args:
        chdir: "{{webdir}}/{{ansible_hostname}}"
      when: env.changed
      become: true
      become_user: '{{owner}}'

    - name: Running artisan migrate
      command: '{{php_executable}} artisan migrate --force'
      args:
        chdir: "{{webdir}}/{{ansible_hostname}}"
      when: env.changed
      become: true
      become_user: '{{owner}}'

    - name: Checking if SELINUX is enabled
      command: getenforce
      register: sestatus
      become: true
  
    - name: Setting SELinux boolean for ldap integration
      seboolean:
        name: httpd_can_connect_ldap 
        persistent: yes
        state: yes
      become: true
      when: sestatus == 'Enabled'

    - name: Setting SELinux context type for web server process
      sefcontext:
        target: '{{webdir}}/{{app_name}}/'
        setype: httpd_sys_script_rw_t
        state: present
      become: true
      notify:
       - restart httpd
      when: sestatus == 'Enabled'
    
    - name: Restarting httpd
      command: echo "Restarting..."
      notify:
       - restart httpd
    

  # Handlers
  handlers:
    - name: restart httpd
      service:
        name: httpd
        state: restarted
      become: true
    

